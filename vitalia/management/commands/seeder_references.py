from django.core.management import BaseCommand, CommandError

from doctors.models.city import City
from doctors.models.specialty import Specialty
from patients.models.allergies import Allergies
from patients.models.current_medication import CurrentMedication
from patients.models.medical_history import MedicalHistory
from patients.models.medical_intervention import MedicalIntervention
from patients.models.relevant_diseases import RelevantDiseases


class Command(BaseCommand):
    help = "Seeder of the database. Reference tables are filled with data."
    SPECIALTIES = ["Cardiolog√≠a", "Dermatolog√≠a", "Neurolog√≠a", "Pediatr√≠a", "Ginecolog√≠a", "Oncolog√≠a", "Psiquiatr√≠a", "Oftalmolog√≠a", "Cirug√≠a General", "Ortopedia"]
    ALLERGIES = ["Polen", "√Åcaros", "Alimentos", "Medicamentos", "Picadura de insectos", "Moho", "L√°tex", "Animales", "Perfumes", "N√≠quel"]
    RELEVANT_DISEASESS = ["Diabetes", "Hipertensi√≥n", "Asma", "Artritis", "C√°ncer", "Enfermedad de Alzheimer", "Gripe", "Depresi√≥n", "Migra√±a", "Enfermedad card√≠aca"]
    CURRENT_MEDICATIONS = ["Ibuprofeno", "Paracetamol", "Amoxicilina", "Metformina", "Loratadina", "Omeprazol", "Atorvastatina", "Lisinopril", "Diazepam", "Aspirina"]
    MEDICAL_INTERVENTIONS = ["Apendicectom√≠a", "Colecistectom√≠a", "Bypass g√°strico", "Angioplastia", "Ces√°rea", "Reemplazo de rodilla", "Resecci√≥n de tumor", "Cateterismo card√≠aco", "Lobectom√≠a", "Endoscopia"]


    def add_arguments(self, parser):
        pass

    def handle(self, *args, **options):
        print("\nCreating specialties üë®‚Äç‚öïÔ∏è")
        for specialty in self.SPECIALTIES:
            try:
                Specialty.objects.create(name=specialty)
                print(f"{specialty} created")
            except Exception as e:
                pass
        print("Ending specialties creationüëã")
        print("\nCreating allergies ‚òòÔ∏è")
        for allergy in self.ALLERGIES:
            try:
                Allergies.objects.create(name=allergy)
                print(f"{allergy} created")
            except Exception as e:
                pass
        print("Ending allergies creationüëã")
        print("\nCreating relevant diseases üíâ")
        for relevant_disease in self.RELEVANT_DISEASESS:
            try:
                RelevantDiseases.objects.create(name=relevant_disease)
                print(f"{relevant_disease} created")
            except Exception as e:
                pass
        print("Ending relevant diseases creationüëã")
        print("\nCreating current medications üíä")
        for current_medication in self.CURRENT_MEDICATIONS:
            try:
                CurrentMedication.objects.create(name=current_medication)
                print(f"{current_medication} created")
            except Exception as e:
                pass
        print("Ending current medications creationüëã")
        print("\nCreating medical interventions ‚ù§Ô∏è‚Äçü©π")
        for medical_intervention in self.MEDICAL_INTERVENTIONS:
            try:
                MedicalIntervention.objects.create(name=medical_intervention)
                print(f"{medical_intervention} created")
            except Exception as e:
                pass
        print("Ending medical interventios creationüëã")